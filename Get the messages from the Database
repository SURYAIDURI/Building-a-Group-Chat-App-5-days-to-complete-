$("#chatForm").submit(() => {
  let text = $("#chat_input").val();
  socket.emit("message", {
    content: text
  });
  $("#chat_input").val("");
  return false;
});
client.on("message", data => {
  io.emit("message", { content: data.content });
});
<% if (currentUser) { %>
  <h1>Chat</h1>
  <form id="chatForm">
    <input id="chat-input" type="text">
      <input id="chat-user-name" type="hidden"
 value="<%= currentUser.fullName %>">
    <input id="chat-user-id" type="hidden"
 value="<%= currentUser._id %>">
    <input type="submit" value="Send">
  </form>
  <div id="chat"></div>
<% } %>
$("#chatForm").submit(() => {
  let text = $("#chat-input").val(),
    userId = $("#chat-user-id").val();
  socket.emit("message", {
    content: text,
    userId: userId
  });
  $("#chat-input").val("");
  return false;
});
client.on("message", (data) => {
  let messageAttributes = {
    content: data.content,
    userName: data.userName,
    user: data.userId
  };
  io.emit("message", messageAttributes);
});

let displayMessage = (message) => {
  $("#chat").prepend(
    $("<li>").html(`
<div class="message ${getCurrentUserClass(message.user)}">
${message.content}
</div>`)
  );
};

let getCurrentUserClass = (id) => {
  let userId = $("#chat-user-id").val();
  return userId === id ? "current-user": "";
};
$("#chatForm").submit(() => {
  let text = $("#chat-input").val(),
    userName = $("#chat-user-name").val(),
    userId = $("#chat-user-id").val();
  socket.emit("message", {
    content: text,
    userName: userName,
    userId: userId
  });
  $("#chat_input").val("");
  return false;
});

$("#chat").prepend($("<li>").html(`
<strong class="message ${getCurrentUserClass(
 message.user )}">
${message.userName}
</strong>: ${message.content}
`));


const mongoose = require("mongoose"),
  { Schema } = require("mongoose");
const messageSchema = new Schema({
  content: {
    type: String,
    required: true
  },
  userName: {
    type: String,
    required: true
  },
  user: {
    type: Schema.Types.ObjectId,
    ref: "User",
    required: true
  }
}, { timestamps: true });

module.exports = mongoose.model("Message", messageSchema);


client.on("message", (data) => {
  let messageAttributes = {
      content: data.content,
      userName: data.userName,
      user: data.userId
    },
    m = new Message(messageAttributes);
  m.save()
    .then(() => {
      io.emit("message", messageAttributes);
    })
    .catch(error => console.log(`error: ${error.message}`));
});
Message.find({})
  .sort({ createdAt: -1 })
  .limit(10)
  .then(messages => {
    client.emit("load all messages", messages.reverse());
  });
  socket.on("load all messages", (data) => {
  data.forEach(message => {
    displayMessage(message);
  });
});

